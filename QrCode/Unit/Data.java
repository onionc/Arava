package Unit;

import java.util.Arrays;

public class Data {

    // 四种模式，顺序不能变，数据里面用到索引
    enum MODE{Numeric, Alphanumeric, Byte, Kanji};
    // 纠错级别，顺序不能变
    static enum LEVEL{L, M, Q, H};
    // 纠错级别的比特位，非顺序增加。有了现成的format informations，用不到这个数据
    // static String LevelBits[] = {"01", "00", "11", "10"};

    // 字符容量。各版本、各纠错级别下的四种模式的字符容量 https://www.thonky.com/qr-code-tutorial/character-capacities
    // 0 version, 版本，有效范围：[1,40]
    // 1 level, 容错级别 (LMQH)分别对应: [0,3]
    // 3 mode, 模式(Numeric, Alphanumeric, Byte, Kanji)：[0,3]
    static final int CharacterCapacities[][][] = {
        {
            
        }, {
            {41, 25, 17, 10},
            {34, 20, 14, 8},
            {27, 16, 11, 7},
            {17, 10, 7, 4},
        }, {
            {77, 47, 32, 20},
            {63, 38, 26, 16},
            {48, 29, 20, 12},
            {34, 20, 14, 8},
        }, {
            {127, 77, 53, 32},
            {101, 61, 42, 26},
            {77, 47, 32, 20},
            {58, 35, 24, 15},
        }, {
            {187, 114, 78, 48},
            {149, 90, 62, 38},
            {111, 67, 46, 28},
            {82, 50, 34, 21},
        }, {
            {255, 154, 106, 65},
            {202, 122, 84, 52},
            {144, 87, 60, 37},
            {106, 64, 44, 27},
        }, {
            {322, 195, 134, 82},
            {255, 154, 106, 65},
            {178, 108, 74, 45},
            {139, 84, 58, 36},
        }, {
            {370, 224, 154, 95},
            {293, 178, 122, 75},
            {207, 125, 86, 53},
            {154, 93, 64, 39},
        }, {
            {461, 279, 192, 118},
            {365, 221, 152, 93},
            {259, 157, 108, 66},
            {202, 122, 84, 52},
        }, {
            {552, 335, 230, 141},
            {432, 262, 180, 111},
            {312, 189, 130, 80},
            {235, 143, 98, 60},
        }, {
            {652, 395, 271, 167},
            {513, 311, 213, 131},
            {364, 221, 151, 93},
            {288, 174, 119, 74},
        }, {
            {772, 468, 321, 198},
            {604, 366, 251, 155},
            {427, 259, 177, 109},
            {331, 200, 137, 85},
        }, {
            {883, 535, 367, 226},
            {691, 419, 287, 177},
            {489, 296, 203, 125},
            {374, 227, 155, 96},
        }, {
            {1022, 619, 425, 262},
            {796, 483, 331, 204},
            {580, 352, 241, 149},
            {427, 259, 177, 109},
        }, {
            {1101, 667, 458, 282},
            {871, 528, 362, 223},
            {621, 376, 258, 159},
            {468, 283, 194, 120},
        }, {
            {1250, 758, 520, 320},
            {991, 600, 412, 254},
            {703, 426, 292, 180},
            {530, 321, 220, 136},
        }, {
            {1408, 854, 586, 361},
            {1082, 656, 450, 277},
            {775, 470, 322, 198},
            {602, 365, 250, 154},
        }, {
            {1548, 938, 644, 397},
            {1212, 734, 504, 310},
            {876, 531, 364, 224},
            {674, 408, 280, 173},
        }, {
            {1725, 1046, 718, 442},
            {1346, 816, 560, 345},
            {948, 574, 394, 243},
            {746, 452, 310, 191},
        }, {
            {1903, 1153, 792, 488},
            {1500, 909, 624, 384},
            {1063, 644, 442, 272},
            {813, 493, 338, 208},
        }, {
            {2061, 1249, 858, 528},
            {1600, 970, 666, 410},
            {1159, 702, 482, 297},
            {919, 557, 382, 235},
        }, {
            {2232, 1352, 929, 572},
            {1708, 1035, 711, 438},
            {1224, 742, 509, 314},
            {969, 587, 403, 248},
        }, {
            {2409, 1460, 1003, 618},
            {1872, 1134, 779, 480},
            {1358, 823, 565, 348},
            {1056, 640, 439, 270},
        }, {
            {2620, 1588, 1091, 672},
            {2059, 1248, 857, 528},
            {1468, 890, 611, 376},
            {1108, 672, 461, 284},
        }, {
            {2812, 1704, 1171, 721},
            {2188, 1326, 911, 561},
            {1588, 963, 661, 407},
            {1228, 744, 511, 315},
        }, {
            {3057, 1853, 1273, 784},
            {2395, 1451, 997, 614},
            {1718, 1041, 715, 440},
            {1286, 779, 535, 330},
        }, {
            {3283, 1990, 1367, 842},
            {2544, 1542, 1059, 652},
            {1804, 1094, 751, 462},
            {1425, 864, 593, 365},
        }, {
            {3517, 2132, 1465, 902},
            {2701, 1637, 1125, 692},
            {1933, 1172, 805, 496},
            {1501, 910, 625, 385},
        }, {
            {3669, 2223, 1528, 940},
            {2857, 1732, 1190, 732},
            {2085, 1263, 868, 534},
            {1581, 958, 658, 405},
        }, {
            {3909, 2369, 1628, 1002},
            {3035, 1839, 1264, 778},
            {2181, 1322, 908, 559},
            {1677, 1016, 698, 430},
        }, {
            {4158, 2520, 1732, 1066},
            {3289, 1994, 1370, 843},
            {2358, 1429, 982, 604},
            {1782, 1080, 742, 457},
        }, {
            {4417, 2677, 1840, 1132},
            {3486, 2113, 1452, 894},
            {2473, 1499, 1030, 634},
            {1897, 1150, 790, 486},
        }, {
            {4686, 2840, 1952, 1201},
            {3693, 2238, 1538, 947},
            {2670, 1618, 1112, 684},
            {2022, 1226, 842, 518},
        }, {
            {4965, 3009, 2068, 1273},
            {3909, 2369, 1628, 1002},
            {2805, 1700, 1168, 719},
            {2157, 1307, 898, 553},
        }, {
            {5253, 3183, 2188, 1347},
            {4134, 2506, 1722, 1060},
            {2949, 1787, 1228, 756},
            {2301, 1394, 958, 590},
        }, {
            {5529, 3351, 2303, 1417},
            {4343, 2632, 1809, 1113},
            {3081, 1867, 1283, 790},
            {2361, 1431, 983, 605},
        }, {
            {5836, 3537, 2431, 1496},
            {4588, 2780, 1911, 1176},
            {3244, 1966, 1351, 832},
            {2524, 1530, 1051, 647},
        }, {
            {6153, 3729, 2563, 1577},
            {4775, 2894, 1989, 1224},
            {3417, 2071, 1423, 876},
            {2625, 1591, 1093, 673},
        }, {
            {6479, 3927, 2699, 1661},
            {5039, 3054, 2099, 1292},
            {3599, 2181, 1499, 923},
            {2735, 1658, 1139, 701},
        }, {
            {6743, 4087, 2809, 1729},
            {5313, 3220, 2213, 1362},
            {3791, 2298, 1579, 972},
            {2927, 1774, 1219, 750},
        }, {
            {7089, 4296, 2953, 1817},
            {5596, 3391, 2331, 1435},
            {3993, 2420, 1663, 1024},
            {3057, 1852, 1273, 784},
        }
    };
    
    /**
     * 纠错码和块信息 (Error Correction Code Words and Block Information)
     * 版本和模式共同锁定到一行，索引为：(version-1)*4+levelIndex，每行的元素是: (Version and EC Level,) Total Number of Data Codewords for this Version and EC Level, EC Codewords Per Block, Number of Blocks in Group 1, Number of Data Codewords in Each of Group 1's Blocks, Number of Blocks in Group 2, Number of Data Codewords in Each of Group 2's Blocks
     * 数据来源 https://www.thonky.com/qr-code-tutorial/error-correction-table
     */
    static final int[][] ECC_AND_BLOCKS = {
        {/*1-L,*/ 19, 7, 1, 19, 0, 0},
        {/*1-M,*/ 16, 10, 1, 16, 0, 0},
        {/*1-Q,*/ 13, 13, 1, 13, 0, 0},
        {/*1-H,*/ 9, 17, 1, 9, 0, 0},
        {/*2-L,*/ 34, 10, 1, 34, 0, 0},
        {/*2-M,*/ 28, 16, 1, 28, 0, 0},
        {/*2-Q,*/ 22, 22, 1, 22, 0, 0},
        {/*2-H,*/ 16, 28, 1, 16, 0, 0},
        {/*3-L,*/ 55, 15, 1, 55, 0, 0},
        {/*3-M,*/ 44, 26, 1, 44, 0, 0},
        {/*3-Q,*/ 34, 18, 2, 17, 0, 0},
        {/*3-H,*/ 26, 22, 2, 13, 0, 0},
        {/*4-L,*/ 80, 20, 1, 80, 0, 0},
        {/*4-M,*/ 64, 18, 2, 32, 0, 0},
        {/*4-Q,*/ 48, 26, 2, 24, 0, 0},
        {/*4-H,*/ 36, 16, 4, 9, 0, 0},
        {/*5-L,*/ 108, 26, 1, 108, 0, 0},
        {/*5-M,*/ 86, 24, 2, 43, 0, 0},
        {/*5-Q,*/ 62, 18, 2, 15, 2, 16},
        {/*5-H,*/ 46, 22, 2, 11, 2, 12},
        {/*6-L,*/ 136, 18, 2, 68, 0, 0},
        {/*6-M,*/ 108, 16, 4, 27, 0, 0},
        {/*6-Q,*/ 76, 24, 4, 19, 0, 0},
        {/*6-H,*/ 60, 28, 4, 15, 0, 0},
        {/*7-L,*/ 156, 20, 2, 78, 0, 0},
        {/*7-M,*/ 124, 18, 4, 31, 0, 0},
        {/*7-Q,*/ 88, 18, 2, 14, 4, 15},
        {/*7-H,*/ 66, 26, 4, 13, 1, 14},
        {/*8-L,*/ 194, 24, 2, 97, 0, 0},
        {/*8-M,*/ 154, 22, 2, 38, 2, 39},
        {/*8-Q,*/ 110, 22, 4, 18, 2, 19},
        {/*8-H,*/ 86, 26, 4, 14, 2, 15},
        {/*9-L,*/ 232, 30, 2, 116, 0, 0},
        {/*9-M,*/ 182, 22, 3, 36, 2, 37},
        {/*9-Q,*/ 132, 20, 4, 16, 4, 17},
        {/*9-H,*/ 100, 24, 4, 12, 4, 13},
        {/*10-L,*/ 274, 18, 2, 68, 2, 69},
        {/*10-M,*/ 216, 26, 4, 43, 1, 44},
        {/*10-Q,*/ 154, 24, 6, 19, 2, 20},
        {/*10-H,*/ 122, 28, 6, 15, 2, 16},
        {/*11-L,*/ 324, 20, 4, 81, 0, 0},
        {/*11-M,*/ 254, 30, 1, 50, 4, 51},
        {/*11-Q,*/ 180, 28, 4, 22, 4, 23},
        {/*11-H,*/ 140, 24, 3, 12, 8, 13},
        {/*12-L,*/ 370, 24, 2, 92, 2, 93},
        {/*12-M,*/ 290, 22, 6, 36, 2, 37},
        {/*12-Q,*/ 206, 26, 4, 20, 6, 21},
        {/*12-H,*/ 158, 28, 7, 14, 4, 15},
        {/*13-L,*/ 428, 26, 4, 107, 0, 0},
        {/*13-M,*/ 334, 22, 8, 37, 1, 38},
        {/*13-Q,*/ 244, 24, 8, 20, 4, 21},
        {/*13-H,*/ 180, 22, 12, 11, 4, 12},
        {/*14-L,*/ 461, 30, 3, 115, 1, 116},
        {/*14-M,*/ 365, 24, 4, 40, 5, 41},
        {/*14-Q,*/ 261, 20, 11, 16, 5, 17},
        {/*14-H,*/ 197, 24, 11, 12, 5, 13},
        {/*15-L,*/ 523, 22, 5, 87, 1, 88},
        {/*15-M,*/ 415, 24, 5, 41, 5, 42},
        {/*15-Q,*/ 295, 30, 5, 24, 7, 25},
        {/*15-H,*/ 223, 24, 11, 12, 7, 13},
        {/*16-L,*/ 589, 24, 5, 98, 1, 99},
        {/*16-M,*/ 453, 28, 7, 45, 3, 46},
        {/*16-Q,*/ 325, 24, 15, 19, 2, 20},
        {/*16-H,*/ 253, 30, 3, 15, 13, 16},
        {/*17-L,*/ 647, 28, 1, 107, 5, 108},
        {/*17-M,*/ 507, 28, 10, 46, 1, 47},
        {/*17-Q,*/ 367, 28, 1, 22, 15, 23},
        {/*17-H,*/ 283, 28, 2, 14, 17, 15},
        {/*18-L,*/ 721, 30, 5, 120, 1, 121},
        {/*18-M,*/ 563, 26, 9, 43, 4, 44},
        {/*18-Q,*/ 397, 28, 17, 22, 1, 23},
        {/*18-H,*/ 313, 28, 2, 14, 19, 15},
        {/*19-L,*/ 795, 28, 3, 113, 4, 114},
        {/*19-M,*/ 627, 26, 3, 44, 11, 45},
        {/*19-Q,*/ 445, 26, 17, 21, 4, 22},
        {/*19-H,*/ 341, 26, 9, 13, 16, 14},
        {/*20-L,*/ 861, 28, 3, 107, 5, 108},
        {/*20-M,*/ 669, 26, 3, 41, 13, 42},
        {/*20-Q,*/ 485, 30, 15, 24, 5, 25},
        {/*20-H,*/ 385, 28, 15, 15, 10, 16},
        {/*21-L,*/ 932, 28, 4, 116, 4, 117},
        {/*21-M,*/ 714, 26, 17, 42, 0, 0},
        {/*21-Q,*/ 512, 28, 17, 22, 6, 23},
        {/*21-H,*/ 406, 30, 19, 16, 6, 17},
        {/*22-L,*/ 1006, 28, 2, 111, 7, 112},
        {/*22-M,*/ 782, 28, 17, 46, 0, 0},
        {/*22-Q,*/ 568, 30, 7, 24, 16, 25},
        {/*22-H,*/ 442, 24, 34, 13, 0, 0},
        {/*23-L,*/ 1094, 30, 4, 121, 5, 122},
        {/*23-M,*/ 860, 28, 4, 47, 14, 48},
        {/*23-Q,*/ 614, 30, 11, 24, 14, 25},
        {/*23-H,*/ 464, 30, 16, 15, 14, 16},
        {/*24-L,*/ 1174, 30, 6, 117, 4, 118},
        {/*24-M,*/ 914, 28, 6, 45, 14, 46},
        {/*24-Q,*/ 664, 30, 11, 24, 16, 25},
        {/*24-H,*/ 514, 30, 30, 16, 2, 17},
        {/*25-L,*/ 1276, 26, 8, 106, 4, 107},
        {/*25-M,*/ 1000, 28, 8, 47, 13, 48},
        {/*25-Q,*/ 718, 30, 7, 24, 22, 25},
        {/*25-H,*/ 538, 30, 22, 15, 13, 16},
        {/*26-L,*/ 1370, 28, 10, 114, 2, 115},
        {/*26-M,*/ 1062, 28, 19, 46, 4, 47},
        {/*26-Q,*/ 754, 28, 28, 22, 6, 23},
        {/*26-H,*/ 596, 30, 33, 16, 4, 17},
        {/*27-L,*/ 1468, 30, 8, 122, 4, 123},
        {/*27-M,*/ 1128, 28, 22, 45, 3, 46},
        {/*27-Q,*/ 808, 30, 8, 23, 26, 24},
        {/*27-H,*/ 628, 30, 12, 15, 28, 16},
        {/*28-L,*/ 1531, 30, 3, 117, 10, 118},
        {/*28-M,*/ 1193, 28, 3, 45, 23, 46},
        {/*28-Q,*/ 871, 30, 4, 24, 31, 25},
        {/*28-H,*/ 661, 30, 11, 15, 31, 16},
        {/*29-L,*/ 1631, 30, 7, 116, 7, 117},
        {/*29-M,*/ 1267, 28, 21, 45, 7, 46},
        {/*29-Q,*/ 911, 30, 1, 23, 37, 24},
        {/*29-H,*/ 701, 30, 19, 15, 26, 16},
        {/*30-L,*/ 1735, 30, 5, 115, 10, 116},
        {/*30-M,*/ 1373, 28, 19, 47, 10, 48},
        {/*30-Q,*/ 985, 30, 15, 24, 25, 25},
        {/*30-H,*/ 745, 30, 23, 15, 25, 16},
        {/*31-L,*/ 1843, 30, 13, 115, 3, 116},
        {/*31-M,*/ 1455, 28, 2, 46, 29, 47},
        {/*31-Q,*/ 1033, 30, 42, 24, 1, 25},
        {/*31-H,*/ 793, 30, 23, 15, 28, 16},
        {/*32-L,*/ 1955, 30, 17, 115, 0, 0},
        {/*32-M,*/ 1541, 28, 10, 46, 23, 47},
        {/*32-Q,*/ 1115, 30, 10, 24, 35, 25},
        {/*32-H,*/ 845, 30, 19, 15, 35, 16},
        {/*33-L,*/ 2071, 30, 17, 115, 1, 116},
        {/*33-M,*/ 1631, 28, 14, 46, 21, 47},
        {/*33-Q,*/ 1171, 30, 29, 24, 19, 25},
        {/*33-H,*/ 901, 30, 11, 15, 46, 16},
        {/*34-L,*/ 2191, 30, 13, 115, 6, 116},
        {/*34-M,*/ 1725, 28, 14, 46, 23, 47},
        {/*34-Q,*/ 1231, 30, 44, 24, 7, 25},
        {/*34-H,*/ 961, 30, 59, 16, 1, 17},
        {/*35-L,*/ 2306, 30, 12, 121, 7, 122},
        {/*35-M,*/ 1812, 28, 12, 47, 26, 48},
        {/*35-Q,*/ 1286, 30, 39, 24, 14, 25},
        {/*35-H,*/ 986, 30, 22, 15, 41, 16},
        {/*36-L,*/ 2434, 30, 6, 121, 14, 122},
        {/*36-M,*/ 1914, 28, 6, 47, 34, 48},
        {/*36-Q,*/ 1354, 30, 46, 24, 10, 25},
        {/*36-H,*/ 1054, 30, 2, 15, 64, 16},
        {/*37-L,*/ 2566, 30, 17, 122, 4, 123},
        {/*37-M,*/ 1992, 28, 29, 46, 14, 47},
        {/*37-Q,*/ 1426, 30, 49, 24, 10, 25},
        {/*37-H,*/ 1096, 30, 24, 15, 46, 16},
        {/*38-L,*/ 2702, 30, 4, 122, 18, 123},
        {/*38-M,*/ 2102, 28, 13, 46, 32, 47},
        {/*38-Q,*/ 1502, 30, 48, 24, 14, 25},
        {/*38-H,*/ 1142, 30, 42, 15, 32, 16},
        {/*39-L,*/ 2812, 30, 20, 117, 4, 118},
        {/*39-M,*/ 2216, 28, 40, 47, 7, 48},
        {/*39-Q,*/ 1582, 30, 43, 24, 22, 25},
        {/*39-H,*/ 1222, 30, 10, 15, 67, 16},
        {/*40-L,*/ 2956, 30, 19, 118, 6, 119},
        {/*40-M,*/ 2334, 28, 18, 47, 31, 48},
        {/*40-Q,*/ 1666, 30, 34, 24, 34, 25},
        {/*40-H,*/ 1276, 30, 20, 15, 61, 16},
    };
    // 上面数组的每一列
    enum ECC_AND_BLOCKS_COLUMN {DC_TOTAL, ECC_PER_BLOCK, G1_BLOCKS_NUM, G1_DC_NUM, G2_BLOCKS_NUM, G2_DC_NUM};

    // pad 字节 
    static final String PAD[] = {"11101100", "00010001"};

    // 模式指示器，顺序依次是(Numeric, Alpha, Byte, Kanji, ECI) 最后一个为混合模式 (ECI mode)
    static final String ModeIndicator[] = {"0001", "0010", "0100", "1000", "0111"}; 

    

    // 字符编码, 值分别是[0,44]
    static final String CharCode = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:"; 
    // 版本所需位 (第一项的0是后加的，为了索引和版本统一，1-40)
    static final int VersionsRequiredRemainderBits[] = {0,0,7,7,7,7,7,0,0,0,0,0,0,0,3,3,3,3,3,3,3,4,4,4,4,4,4,4,3,3,3,3,3,3,3,0,0,0,0,0,0};

    // function patterns 功能模式, 1 black, 2 white
    // 查找模式 finder patterns
    static final int FinderPatterns[][] = {
        {1,1,1,1,1,1,1},
        {1,0,0,0,0,0,1},
        {1,0,1,1,1,0,1},
        {1,0,1,1,1,0,1},
        {1,0,1,1,1,0,1},
        {1,0,0,0,0,0,1},
        {1,1,1,1,1,1,1}
    };
    // 分隔符 Seperators
    static final int SeperatorsRow[][] = {
        {0,0,0,0,0,0,0,0}
    };
    static final int SeperatorsColumn[][] = {
        {0},{0},{0},{0},{0},{0},{0},{0}
    };
    // 对齐模式 Alignment Patterns
    static final int AlignmentPatterns[][] = {
        {1,1,1,1,1},
        {1,0,0,0,1},
        {1,0,1,0,1},
        {1,0,0,0,1},
        {1,1,1,1,1},
    };
    // 对齐模式位置表 Alignment Pattern Locations
    static final int AlignmentPatternLocations[][] = {
        {}, {}, // version>=2才有对齐模式
        {6,18}, // version = 2
        {6,22},
        {6,26},
        {6,30},
        {6,34},
        {6,22,38},
        {6,24,42},
        {6,26,46},
        {6,28,50},
        {6,30,54},
        {6,32,58},
        {6,34,62},
        {6,26,46,66},
        {6,26,48,70},
        {6,26,50,74},
        {6,30,54,78},
        {6,30,56,82},
        {6,30,58,86},
        {6,34,62,90},
        {6,28,50,72,94},
        {6,26,50,74,98},
        {6,30,54,78,102},
        {6,28,54,80,106},
        {6,32,58,84,110},
        {6,30,58,86,114},
        {6,34,62,90,118},
        {6,26,50,74,98,122},
        {6,30,54,78,102,126},
        {6,26,52,78,104,130},
        {6,30,56,82,108,134},
        {6,34,60,86,112,138},
        {6,30,58,86,114,142},
        {6,34,62,90,118,146},
        {6,30,54,78,102,126,150},
        {6,24,50,76,102,128,154},
        {6,28,54,80,106,132,158},
        {6,32,58,84,110,136,162},
        {6,26,54,82,110,138,166},
        {6,30,58,86,114,142,170},
    };
    
    // 掩码
    interface MaskingService{
        boolean check(int row, int column);
    }
    static MaskingService mask1 = (int row, int column) -> (row + column) % 2 == 0;
    static MaskingService mask2 = (int row, int column) -> (row) % 2 == 0;
    static MaskingService mask3 = (int row, int column) -> (column) % 3 == 0;
    static MaskingService mask4 = (int row, int column) -> (row + column) % 3 == 0;
    static MaskingService mask5 = (int row, int column) -> ( (row / 2) + (column / 3) ) % 2 == 0;
    static MaskingService mask6 = (int row, int column) -> ((row * column) % 2) + ((row * column) % 3) == 0;
    static MaskingService mask7 = (int row, int column) -> ( ((row * column) % 2) + ((row * column) % 3) ) % 2 == 0;
    static MaskingService mask8 = (int row, int column) -> ( ((row + column) % 2) + ((row * column) % 3) ) % 2 == 0;
    static MaskingService masking[] = {mask1, mask2, mask3, mask4, mask5, mask6, mask7, mask8};
    
    // 格式信息字符串 (Format Information Strings)，共32个，4种纠错级别*8种掩码。索引为：(level*8+mask), 其中level[0,3], mask[0,7]。 数据来源https://www.thonky.com/qr-code-tutorial/format-version-tables
    static String FormatInformations[] = {"111011111000100","111001011110011","111110110101010","111100010011101","110011000101111","110001100011000","110110001000001","110100101110110","101010000010010","101000100100101","101111001111100","101101101001011","100010111111001","100000011001110","100111110010111","100101010100000","011010101011111","011000001101000","011111100110001","011101000000110","010010010110100","010000110000011","010111011011010","010101111101101","001011010001001","001001110111110","001110011100111","001100111010000","000011101100010","000001001010101","000110100001100","000100000111011"};
    // 版本信息字符串 (Version Information Strings), 共40-7=34个，索引为版本号，version[7,40]
    static String VersionInformations[] = {"000111110010010100","001000010110111100","001001101010011001","001010010011010011","001011101111110110","001100011101100010","001101100001000111","001110011000001101","001111100100101000","010000101101111000","010001010001011101","010010101000010111","010011010100110010","010100100110100110","010101011010000011","010110100011001001","010111011111101100","011000111011000100","011001000111100001","011010111110101011","011011000010001110","011100110000011010","011101001100111111","011110110101110101","011111001001010000","100000100111010101","100001011011110000","100010100010111010","100011011110011111","100100101100001011","100101010000101110","100110101001100100","100111010101000001","101000110001101001"};
    
    // 惩罚评估规则 3
    static int EvaluationRule3[] = {1,0,1,1,1,0,1,0,0,0,0};
    static int EvaluationRule3r[] = {0,0,0,0,1,0,1,1,1,0,1};

    /**
     * 字符计数指示器，（将数据长度编码，不同版本下有不同的宽度）
     * @param version
     * @return
     */
    static final int[] CharacterCountIndicator(int version){
        if(version>=1 && version<=9){
            return new int[] {10, 9, 8, 8};
        }else if(version>=10 && version<=26){
            return new int[] {12, 11, 16, 10};
        }else if(version>=27 && version<=40){
            return new int[] {14, 13, 16, 12};
        }else{
            return null;
        }
    }

    // 各版本生成的图像大小（单位是模块）
    static final int getSize(int version){
        return ((version-1)*4)+21;
    }

    // 对齐模式生成的坐标
    static int[][] AlignmentPatternPosition(int version){
        int apl[] = Data.AlignmentPatternLocations[version];
        int app[][] = new int[apl.length*apl.length][2];
        int p=0;
        for(int i=0; i<apl.length; i++){
            for(int j=0; j<apl.length; j++){
                app[p][0] = apl[i];
                app[p][1] = apl[j]; 
                p++;
            }
        }
        return app;
    }

    // 格式信息字符串获取
    static String getFormatInformations(int level, int mask){
        if(level<0 || level>3 || mask<0 || mask>7){
            return null;
        }
        return Data.FormatInformations[(level)*8+mask];
    }
}